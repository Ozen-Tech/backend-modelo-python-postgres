
#!/bin/bash
# start-prod.sh

# N√£o precisamos de mais nada aqui, o Render vai rodar as migra√ß√µes em um comando separado.
# Este script tem uma √∫nica responsabilidade: iniciar o servidor de produ√ß√£o.

echo "üî• Iniciando a API em modo de produ√ß√£o com Gunicorn..."
gunicorn -c /code/gunicorn_conf.py app.main:app```

#### **Passo 4: Atualizar o `Dockerfile`**

Vamos dizer ao Docker que, por padr√£o, ele deve usar nosso novo script de produ√ß√£o. O `docker-compose.yml` ir√° sobrepor este comando no ambiente de desenvolvimento, ent√£o n√£o se preocupe.

Substitua o conte√∫do do seu `Dockerfile` por este:

```dockerfile
# Dockerfile
FROM python:3.11-slim
WORKDIR /code

ENV PYTHONPATH "${PYTHONPATH}:/code"

COPY requirements.txt /code/requirements.txt
RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt
COPY . /code
EXPOSE 8000

# O comando padr√£o para o container ser√° o de produ√ß√£o.
# No desenvolvimento, nosso docker-compose.yml ir√° sobrepor isso com start.sh
CMD ["/code/start-prod.sh"]